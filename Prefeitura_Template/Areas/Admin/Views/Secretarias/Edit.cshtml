@model Prefeitura_Template.Models.Secretaria
@{
    ViewBag.Title = "Editar Secretaria";
    ViewBag.AreaTitle = "Editar Secretaria";
}

@using (Html.BeginForm("Edit", "Secretarias", FormMethod.Post, new { role = "form", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="col-md-12">
        <div class="box box-warning">
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.DataCadastro)
            @Html.HiddenFor(model => model.Status)
            <div class="box-body">
                <div class="editor-label">
                    @Html.LabelFor(m => m.SecretariaCategoriaId)
                </div>
                <div class="form-group">
                    @Html.DropDownListFor(m => m.SecretariaCategoriaId, (IEnumerable<SelectListItem>)ViewBag.Categorias, new { @class = "form-control chosen-select" })
                    @Html.ValidationMessageFor(model => model.SecretariaCategoriaId)
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="editor-label" style="margin-left:13px">
                            @Html.LabelFor(m => m.Nome)
                        </div>
                        <div class="col-md-3">
                            @Html.DropDownListFor(m => m.SecretariaNomePrefixoId, (IEnumerable<SelectListItem>)ViewBag.Prefixos, new { @class = "form-control chosen-select" })
                            @Html.ValidationMessageFor(model => model.SecretariaNomePrefixoId)
                        </div>
                        <div class="col-md-9">
                            @Html.TextBoxFor(m => m.Nome, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-6 col-xs-12">
                            @Html.LabelFor(model => model.Icone, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.Icone, new { @style = "display: none;" })
                            <input type="file" class="form-control" name="Icone" title="Icone" id="CampoIcone" onchange="VerificaTamanhoIcone(this);" />
                            @Html.ValidationMessageFor(model => model.Icone)
                            <span style="display:none;color:red" id="ErrorIcone">Tamanho máximo permitido 15 MB</span>
                            @if (!string.IsNullOrEmpty(Model.Icone))
                            {
                                <div id="BotoesAudioHino">
                                    <a href="@Url.Content(Model.CaminhoLogicoIcone)" class='btn btn-info btn-sm' alt='Visualizar' title='Visualizar' style="margin-top:5px;" target="_blank">Visualizar</a>
                                </div>
                            }
                        </div>

                        <div class="col-md-4">
                            <div class="callout callout-info">
                                <h4>Recomenda&ccedil;&otilde;es</h4>
                                <div id="Tamanho">Tamanho: 75x75</div>
                                <p>Formatos aceitos: <b>jpg, gif e png</b></p>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="editor-label">
                    @Html.LabelFor(m => m.NomeResponsavel)
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(m => m.NomeResponsavel, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.NomeResponsavel, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-6 col-xs-12">
                            @Html.LabelFor(model => model.ImagemResponsavel, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.ImagemResponsavel, new { @style = "display: none;" })
                            <input type="file" class="form-control" name="ImagemResponsavel" title="ImagemResponsavel" id="CampoImagemResponsavel" onchange="VerificaTamanhoImagemResponsavel(this);" />
                            @Html.ValidationMessageFor(model => model.ImagemResponsavel)
                            <span style="display:none;color:red" id="ErrorImagemResponsavel">Tamanho máximo permitido 15 MB</span>
                            @if (!string.IsNullOrEmpty(Model.ImagemResponsavel))
                            {
                                <div id="BotoesAudioHino">
                                    <a href="@Url.Content(Model.CaminhoLogicoImagemResponsavel)" class='btn btn-info btn-sm' alt='Visualizar' title='Visualizar' style="margin-top:5px;" target="_blank">Visualizar</a>
                                </div>
                            }
                        </div>

                        <div class="col-md-4">
                            <div class="callout callout-info">
                                <h4>Recomenda&ccedil;&otilde;es</h4>
                                <div id="Tamanho">Tamanho: 57x57</div>
                                <p>Formatos aceitos: <b>jpg, gif e png</b></p>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="editor-label">
                    @Html.LabelFor(m => m.Cargo)
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(m => m.Cargo, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Cargo, "", new { @class = "text-danger" })
                </div>
                <div class="editor-label">
                    @Html.LabelFor(m => m.Email)
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
                <div class="editor-label">
                    @Html.LabelFor(m => m.Telefone)
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(m => m.Telefone, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Telefone, "", new { @class = "text-danger" })
                </div>
                <div class="editor-label">
                    @Html.LabelFor(m => m.HorarioAtendimento)
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(m => m.HorarioAtendimento, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.HorarioAtendimento, "", new { @class = "text-danger" })
                </div>
                <div class="editor-label">
                    @Html.LabelFor(m => m.Endereco)
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(m => m.Endereco, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Endereco, "", new { @class = "text-danger" })
                </div>
                <div class="editor-label">
                    @Html.LabelFor(m => m.Atribuicao)
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(m => m.Atribuicao, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Atribuicao, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-6 col-xs-12">
                            @Html.LabelFor(model => model.ImagemLocal, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.ImagemLocal, new { @style = "display: none;" })
                            <input type="file" class="form-control" name="ImagemLocal" title="ImagemLocal" id="CampoImagemLocal" onchange="VerificaTamanhoImagemLocal(this);" />
                            @Html.ValidationMessageFor(model => model.ImagemLocal)
                            <span style="display:none;color:red" id="ErrorImagemLocal">Tamanho máximo permitido 15 MB</span>
                            @if (!string.IsNullOrEmpty(Model.ImagemLocal))
                            {
                                <div id="BotoesImagemLocal">
                                    <a href="@Url.Content(Model.CaminhoLogicoImagemLocal)" class='btn btn-info btn-sm' alt='Visualizar' title='Visualizar' style="margin-top:5px;" target="_blank">Visualizar</a>
                                    <a href="#" onclick="javascript:mensagemexcluirarquivo('@Url.Action("DeleteImagemLocal", "Secretarias", new { id= Model.Id })' , 'ImagemLocal')" style="margin-top:5px;" class='btn btn-danger btn-sm' alt='Excluir' title='Excluir'>Remover</a>
                                </div>
                            }
                        </div>

                        <div class="col-md-4">
                            <div class="callout callout-info">
                                <h4>Recomenda&ccedil;&otilde;es</h4>
                                <div id="Tamanho">Tamanho: 253x258</div>
                                <p>Formatos aceitos: <b>jpg, gif e png</b></p>
                            </div>
                        </div>

                    </div>
                </div>

                @*@Html.HiddenFor(m => m.Latitude)
                @Html.HiddenFor(m => m.Longitude)
                <input id="txtLocation" type="hidden" class="element-input" name="">
                <div class="content-padding" id="Principal">
                    <label for="txtLocation">* Selecione o Local</label>
                    <input id="pac-input" class="controls" type="text" placeholder="Digite um endereço.." onkeydown="if (window.event.keyCode == 13) { return false; }">
                    <div id="map" class="map"></div>
                </div>*@

                <div class="editor-label">
                    @Html.LabelFor(m => m.Latitude)
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(m => m.Latitude, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                </div>
                <div class="editor-label">
                    @Html.LabelFor(m => m.Longitude)
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(m => m.Longitude, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label>Tags</label>
                    <input name="Tags" id="Tags" value="@ViewBag.Tag" class="form-control">
                </div>
            </div>
            <div class="box-footer">
                <a href="@Url.Action("Details", "Secretarias", new { id= Model.Id })" class="btn btn-warning">Cancelar</a>
                <input type="submit" value="Salvar" class="btn btn-primary" />
            </div>
        </div>

    </div>
}

@section Scripts {
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.9.2/jquery-ui.min.js" type="text/javascript" charset="utf-8"></script>
<script src="@Url.Content("~/Areas/Admin/js/plugins/tagIT/tag-it.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Areas/Admin/js/jquery-gmaps-latlon-picker.js")" type="text/javascript"></script>
    <script>
        var sampleTags = @Html.Raw(Json.Encode(ViewBag.AutoCompleteTags));

        $('#Tags').tagit({
            availableTags: sampleTags
        });

        $(document).ready(function(){
            $('#Icone').val(@Model.Icone);
            $('#ImagemResponsavel').val(@Model.ImagemResponsavel);
            $('#ImagemLocal').val(@Model.ImagemLocal);
        });

        function VerificaTamanhoIcone(evt) {
            $('#Icone').val(@Model.Icone);
            $("#ErrorIcone").hide();

            var file = evt.files;


            if (file && file.length) {
                if (file[0].size > 15000000) {
                    $("#ErrorIcone").show();
                    $("#CampoIcone").val('');
                }
                else {
                    $('#Icone').val($(evt).val().split('\\').pop());
                }
            }
        };

        function VerificaTamanhoImagemResponsavel(evt) {
            $('#ImagemResponsavel').val(@Model.ImagemResponsavel);
            $("#ErrorImagemResponsavel").hide();

            var file = evt.files;


            if (file && file.length) {
                if (file[0].size > 15000000) {
                    $("#ErrorImagemResponsavel").show();
                    $("#CampoImagemResponsavel").val('');
                }
                else {
                    $('#ImagemResponsavel').val($(evt).val().split('\\').pop());
                }
            }
        };

        function VerificaTamanhoImagemLocal(evt) {
            $('#ImagemLocal').val(@Model.ImagemLocal);
            $("#ErrorImagemLocal").hide();

            var file = evt.files;

            if (file && file.length) {
                if (file[0].size > 15000000) {
                    $("#ErrorImagemLocal").show();
                    $("#CampoImagemLocal").val('');
                }
                else {
                    $('#ImagemLocal').val($(evt).val().split('\\').pop());
                }
            }
        };

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                scrollwheel: false,
                zoom: 16,
                mapTypeControl: false,
                streetViewControl: false
            });


            var geocoder = new google.maps.Geocoder;
            var infowindow = new google.maps.InfoWindow;

            //opções do mapa
            var options = {
                enableHighAccuracy: true,
                timeout: 5000,
                maximumAge: 0
            };


            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {

                    var pos = {
                        lat: @Model.Latitude,
                        lng: @Model.Longitude
                        };

                    addMarker(pos);
                    // map.setCenter(pos);
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                }, options);
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }

            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];


            //evento de click no mapa
            map.addListener('click', function (e) {
                var pos = {
                    lat: e.latLng.lat(),
                    lng: e.latLng.lng()
                }
                addMarker(pos);
            });

            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();

                if (places.length > 0) {
                    var pos = {
                        lat: places[0].geometry.location.lat(),
                        lng: places[0].geometry.location.lng()
                    };


                    addMarker(pos);
                }

                map.fitBounds(bounds);
            });


            //função para adicionar uma nova marcação no mapa
            function addMarker(latLng) {
                //removendo os markers anteriores
                deleteMarkers();
                //adicionando um novo
                geocoder.geocode({ 'location': latLng }, function (results, status) {
                    if (status === 'OK') {
                        if (results[0]) {
                            map.setZoom(16);

                            var marker = new google.maps.Marker({
                                position: latLng,
                                map: map,
                                title: results[0].formatted_address,
                                animation: google.maps.Animation.DROP,
                                draggable: true
                            });
                            //preenche os inputs de latitude e longitude
                            document.getElementById("Latitude").value = latLng.lat;
                            document.getElementById("Longitude").value = latLng.lng;
                            //preenche o input com o endereço
                            document.getElementById("txtLocation").value = results[0].formatted_address;
                            document.getElementById("pac-input").value = results[0].formatted_address;

                            markers.push(marker);
                            map.setCenter(latLng);
                        } else {
                            window.alert('No results found');
                        }
                    } else {
                        window.alert('Geocoder failed due to: ' + status);
                    }
                });
            }

            // Sets the map on all markers in the array.
            function setMapOnAll(map) {
                for (var i = 0; i < markers.length; i++) {
                    markers[i].setMap(map);
                }
            }
            // Removes the markers from the map, but keeps them in the array.
            function clearMarkers() {
                setMapOnAll(null);
            }
            // Deletes all markers in the array by removing references to them.
            function deleteMarkers() {
                clearMarkers();
                markers = [];
            }
        }

        jQuery(function () {
            $('#map').fadeIn(600);
        });
    </script>
}